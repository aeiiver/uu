name: build-multi-platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install build dependencies
      run: |
        if [ "${{ matrix.c_compiler }}" == "clang" ]; then
          apt update && apt install -y clang
        elif [ "${{ matrix.c_compiler }}" == "cl" ]; then
          choco install visualcpp-build-tools
        fi

    - name: Build
      run: |
        mkdir -p ${{ steps.strings.outputs.build-output-dir }}
        ${{ matrix.c_compiler }} -O3 -std=c99 -Wall -Wpedantic -o ${{ steps.strings.outputs.build-output-dir }}/m uu.c

    - name: Test self-build
      run: |
        if [ "${{ matrix.c_compiler }}" == "clang" ]; then
          touch uu.c
          ${{ steps.strings.outputs.build-output-dir }}/m
        elif [ "${{ matrix.c_compiler }}" == "cl" ]; then
          copy /b uu.c +,,
          start ${{ steps.strings.outputs.build-output-dir }}/m
        fi
